set nocompatible                " no vi
set backspace=indent,eol,start  " sensical backspaces

" for operating-system-specific functionality
let g:uname = substitute(system('uname'), '\n', '', '')

" appearance
set ruler
set showcmd
set background=dark
if &term =~ '^xterm'
  let &t_SI .= "\<Esc>[6 q" " solid | (insert)
  let &t_EI .= "\<Esc>[2 q" " solid block (normal, visual, command)
endif

" searching
set hlsearch
set ignorecase smartcase

" windows
set splitbelow splitright

" formatting
set smarttab expandtab tabstop=4 shiftwidth=4
set wrap linebreak

" autocomplete
set completeopt+=longest

" command-line tab completion
set wildmode=longest:full,full
set wildmenu

" file explorer
let g:netrw_banner = 0
let g:netrw_liststyle = 3

map <Space> <Leader>

" buffers
nnoremap gb :ls<CR>:b<Space>
set hidden

" insert mode mappings
inoremap <C-V>d <C-r>=strftime('%-m/%-d/%Y')<CR>

" vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" number formats
set nrformats-=octal

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'jeffkreeftmeijer/vim-numbertoggle' | set number relativenumber
Plug 'ervandew/supertab'
  let g:SuperTabDefaultCompletionType = '<c-x><c-o>'
"  let g:SuperTabMappingForward        = '<c-j>'
"  let g:SuperTabMappingBackward       = '<c-k>'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
  let g:UltiSnipsExpandTrigger        = '<tab>'
  let g:UltiSnipsJumpForwardTrigger   = '<tab>'
  let g:UltiSnipsJumpBackwardTrigger  = '<s-tab>'
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'dense-analysis/ale'
  let g:ale_linters = {'python': ['ruff', 'jedils']}
  let g:ale_fixers = {'python' : ['autoflake', 'isort', 'black']}
  let g:ale_python_autoflake_options='--remove-all-unused-imports --ignore-init-module-imports --remove-unused-variables'
  let g:ale_python_isort_options='--profile black'
  let g:ale_echo_msg_format='[%linter%%:code%] %s'
  nmap <Leader>f <Plug>(ale_fix)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
Plug 'lervag/vimtex'
  let g:tex_flavor = 'latex'
Plug 'tpope/vim-surround'
Plug 'ludovicchabant/vim-gutentags'
  let g:gutentags_cache_dir = expand('~/.cache/vim/ctags')
  set statusline+=%{gutentags#statusline()}
  let g:gutentags_exclude_filetypes = ['tex']
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
  nnoremap <Leader>p :GFiles<CR>
  nnoremap gb :Buffers<CR>
Plug 'preservim/tagbar'
  nnoremap <Leader>tt :TagbarToggle<CR>
  nnoremap <Leader>tp :TagbarTogglePause<CR>
  let g:tagbar_position = 'topleft vertical'
  let g:tagbar_sort = 0
  let g:tagbar_autofocus = 1
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'chrisbra/csv.vim',  { 'for' : 'csv' }
call plug#end()
